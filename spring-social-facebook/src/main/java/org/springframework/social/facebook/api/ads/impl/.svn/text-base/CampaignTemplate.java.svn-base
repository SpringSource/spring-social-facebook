package org.springframework.social.facebook.api.ads.impl;

import java.util.List;

import org.springframework.social.facebook.api.GraphApi;
import org.springframework.social.facebook.api.ads.AdCampaign;
import org.springframework.social.facebook.api.ads.AdCampaignList;
import org.springframework.social.facebook.api.ads.CampaignOperations;
import org.springframework.social.facebook.api.ads.Id;
import org.springframework.social.facebook.api.ads.Stats;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

class CampaignTemplate extends AbstractAdsOperations implements
		CampaignOperations {
	public CampaignTemplate(GraphApi graphApi, boolean isAuthorizedForUser) {
		super(graphApi, isAuthorizedForUser);
	}

	@Override
	public String[] getConnectionTypes() {
		return new String[] { "adgroup" };
	}

	public List<AdCampaign> getCampaigns(String accountId) {
		requireAuthorization();
		return graphApi.fetchObject(getAccountId(accountId),
				AdCampaignList.class);
	}

	public AdCampaign getCampaign(String campaignId) {
		requireAuthorization();
		return graphApi.fetchObject(campaignId, AdCampaign.class);
	}

	public Stats getCampaignStats(String accountId, long startTime, long endTime) {
		requireAuthorization();
		MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();
		parameters.set("start_time", String.valueOf(startTime));
		parameters.set("end_time", String.valueOf(endTime));
		return graphApi.fetchObject(
				getPath(getAccountId(accountId), "adcampaignstats"),
				Stats.class);
	}

	public Id createCampaign(String accountId, AdCampaign campaign) {
		requireAuthorization();
		MultiValueMap<String, Object> data = new LinkedMultiValueMap<String, Object>();
		data.set("name", campaign.getName());
		data.set("start_time", campaign.getStartTime());
		data.set("end_time", campaign.getEndTime());
		data.set("daily_budget", campaign.getDailyBudget());
		data.set("campaign_status", campaign.getCampaignStatus());
		data.set("lifetime_budget", campaign.getLifetimeBudget());
		String id = graphApi.publish(getAccountId(accountId), "adcampaigns",
				data);
		return new Id(id);
	}

	public boolean updateCampaign(String campaignId, AdCampaign campaign) {
		requireAuthorization();
		MultiValueMap<String, Object> data = new LinkedMultiValueMap<String, Object>();
		data.set("name", campaign.getName());
		data.set("start_time", campaign.getStartTime());
		data.set("end_time", campaign.getEndTime());
		data.set("daily_budget", campaign.getDailyBudget());
		data.set("campaign_status", campaign.getCampaignStatus());
		data.set("lifetime_budget", campaign.getLifetimeBudget());
		return graphApi.update(campaignId, data);
	}

	public boolean deleteCampaign(String campaignId) {
		requireAuthorization();
		String status = graphApi.delete(campaignId);
		return Boolean.valueOf(status);
	}
}
