<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" 		
		xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Facebook API Binding</title>
  
	<para>
		Spring Social Facebook's <interfacename>Facebook</interfacename> interface and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user.
		Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:
	</para>

	<programlisting language="java"><![CDATA[
String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization
Facebook facebook = new FacebookTemplate(accessToken);]]>
	</programlisting>

	<para>
		In addition, <classname>FacebookTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:
	</para>

	<programlisting language="java"><![CDATA[
Facebook facebook = new FacebookTemplate();]]>
	</programlisting>

	<para>
		When constructed with the default constructor, <classname>FacebookTemplate</classname> will allow a few simple operations that do not require authorization, such as retrieving a specific user's profile. 
		Attempting other operations, such as posting a status update will fail with an <classname>MissingAuthorizationException</classname> being thrown.
	</para>

	<para>
		If you are using Spring Social's <ulink url="http://static.springsource.org/spring-social/docs/1.0.x/reference/html/serviceprovider.html">service provider framework</ulink>, you can get an instance of <interfacename>Facebook</interfacename> from a <interfacename>Connection</interfacename>. 
		For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Facebook</interfacename>:
	</para>				

	<programlisting language="java"><![CDATA[
Connection<Facebook> connection = connectionRepository.findPrimaryConnection(Facebook.class);
Facebook facebook = connection != null ? connection.getApi() : new FacebookTemplate();]]>
	</programlisting>

	<para>
		Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connection that the current user has with Facebook.
		If a connection to Facebook is found, a call to <methodname>getApi()</methodname> retrieves a <interfacename>Facebook</interfacename> instance that is configured with the connection details received when the connection was first established.
		If there is no connection, a default instance of <classname>FacebookTemplate</classname> is created.
	</para>
		
	<para>
		With a <interfacename>Facebook</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user.
		Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>Facebook</interfacename>:
	</para>

	<programlisting language="java"><![CDATA[
public interface Facebook extends GraphApi {

    CommentOperations commentOperations();

    EventOperations eventOperations();
	
    FeedOperations feedOperations();

    FriendOperations friendOperations();
	
    GroupOperations groupOperations();

    LikeOperations likeOperations();
	
    MediaOperations mediaOperations();
	
    PlacesOperations placesOperations();
	
    UserOperations userOperations();
	
}]]>
	</programlisting>

	<para>
		The sub-API interfaces returned from <interfacename>Facebook</interfacename>'s methods are described in <xref linkend="table-facebook-sub-apis" />.
	</para>

	<table xml:id="table-facebook-sub-apis">
		<title>Facebook's Sub-APIs</title>
		<tgroup cols="2">
			<colspec align="left" />
			<colspec colnum="1" colname="col1" colwidth="2*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry align="center">Sub-API Interface</entry>
					<entry align="center">Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>CommentOperations</entry>
					<entry>Add, delete, and read comments on Facebook objects.</entry>
				</row>
				<row>
					<entry>EventOperations</entry>
					<entry>Create and maintain events and RSVP to event invitations.</entry>
				</row>
				<row>
					<entry>FeedOperations</entry>
					<entry>Read and post to a Facebook wall.</entry>
				</row>
				<row>
					<entry>FriendOperations</entry>
					<entry>Retrieve a user's friends and maintain friend lists.</entry>
				</row>
				<row>
					<entry>GroupOperations</entry>
					<entry>Retrieve group details and members.</entry>
				</row>
				<row>
					<entry>LikeOperations</entry>
					<entry>Retrieve a user's interests and likes. Like and unlike objects.</entry>
				</row>
				<row>
					<entry>MediaOperations</entry>
					<entry>Maintain albums, photos, and videos.</entry>
				</row>
				<row>
					<entry>PlacesOperations</entry>
					<entry>Checkin to location in Facebook Places and retrieve places a user and their friends have checked into.</entry>
				</row>
				<row>
					<entry>UserOperations</entry>
					<entry>Retrieve user profile data and profile images.</entry>
				</row>
			</tbody>
		</tgroup>
	</table>

	<para>
		The following sections will give an overview of common tasks that can be performed via <interfacename>Facebook</interfacename> and its sub-APIs.
		For complete details on all of the operations available, refer to the JavaDoc.
	</para>

	<section id="facebook-getProfile">
		<title>Retrieving a user's profile data</title>

		<para>
			You can retrieve a user's Facebook profile data using <interfacename>Facebook</interfacename>' <methodname>getUserProfile()</methodname> method:
		</para>

		<programlisting language="java"><![CDATA[
FacebookProfile profile = facebook.userOperations().getUserProfile();]]>
	</programlisting>

	<para>
		The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID.
		Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations.
		For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise.
		Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property.
	</para>
			
	<para>
		If all you need is the user's Facebook ID, you can call <methodname>getProfileId()</methodname> instead:
	</para>
			
	<programlisting language="java"><![CDATA[
String profileId = facebook.userOperations().getProfileId();]]>
	</programlisting>
			
	<para>
		Or if you want the user's Facebook URL, you can call <methodname>getProfileUrl()</methodname>:
	</para>
			
	<programlisting langauge="java"><![CDATA[
String profileUrl = facebook.userOperations().getProfileUrl();]]>
	</programlisting>

	</section>

	<section id="facebook-friends">
		<title>Getting a user's Facebook friends</title>

		<para>
			An essential feature of Facebook and other social networks is creating a network of friends or contacts. 
			You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method from <interfacename>FriendOperations</interfacename>:
		</para>

		<programlisting language="java"><![CDATA[
List<String> friendIds = facebook.friendOperations().getFriendIds();]]>
		</programlisting>
			
		<para>
			This returns a list of Facebook IDs belonging to the current user's list of friends. 
			This is just a list of <classname>String</classname> IDs, so to retrieve an individual user's profile data, you can turn around and call the <methodname>getUserProfile()</methodname>, passing in one of those IDs to retrieve the profile data for an individual user:
		</para>
			
		<programlisting language="java"><![CDATA[
FacebookProfile firstFriend = facebook.userOperations().getUserProfile(friendIds.get(0));]]>
		</programlisting>
			
		<para>
			Or you can get a list of user's friends as <classname>FacebookProfile</classname>s by calling <methodname>getFriendProfiles()</methodname>:
		</para>
			
		<programlisting language="java"><![CDATA[
List<FacebookProfile> friends = facebook.friendOperations().getFriendProfiles();]]>
		</programlisting>			

		<para>
			Facebook also enables users to organize their friends into friend lists.
			To retrieve a list of the authenticating user's friend lists, call <methodname>getFriendLists()</methodname> with no arguments: 
		</para>

		<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendLists();]]>
		</programlisting>
			
		<para>
			You can also retrieve a list of friend lists for a specific user by passing the user ID (or an alias) to <methodname>getFriendLists()</methodname>:
		</para>

		<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendLists("habuma");]]>
		</programlisting>

		<para>
			<methodname>getFriendLists()</methodname> returns a list of <classname>Reference</classname> objects that carry the ID and name of each friend list.
		</para>
			
		<para>
			To retieve a list of friends who are members of a specific friend list call <methodname>getFriendListMembers()</methodname>, passing in the ID of the friend list:
		</para>
			
		<programlisting language="java"><![CDATA[
List<Reference> friends = facebook.friendOperations().getFriendListMembers("193839228");]]>
		</programlisting>
			
		<para>
			<interfacename>FriendOperations</interfacename> also support management of friend lists.
			For example, the <methodname>createFriendList()</methodname> method will create a new friend list for the user:
		</para>
			
		<programlisting language="java"><![CDATA[
Reference collegeFriends = facebook.friendOperations().createFriendList("College Buddies");]]>
		</programlisting>
			
		<para>
			<methodname>createFriendList()</methodname> returns a <classname>Reference</classname> to the newly created friend list.
		</para>
			
		<para>
			To add a friend to the friend list, call <methodname>addToFriendList()</methodname>:
		</para>

		<programlisting language="java"><![CDATA[
facebook.friendOperations().addToFriendList(collegeFriends.getId(), "527631174");]]>
		</programlisting>

		<para>
			<methodname>addToFriendList()</methodname> takes two arguments: The ID of the friend list and the ID (or alias) of a friend to add to the list.
		</para>
			
		<para>
			In a similar fashion, you may remove a friend from a list by calling <methodname>removeFromFriendList()</methodname>:
		</para>

		<programlisting language="java"><![CDATA[
facebook.friendOperations().removeFromFriendList(collegeFriends.getId(), "527631174");]]>
		</programlisting>

	</section>

	<section id="facebook-status">
		<title>Posting to and reading feeds</title>

		<para>
			To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:
		</para>
			
		<programlisting language="java"><![CDATA[
facebook.feedOperations().updateStatus("I'm trying out Spring Social!");]]>
		</programlisting>
			
		<para>
			If you'd like to attach a link to the status message, you can do so by passing in a <classname>FacebookLink</classname> object along with the message:
		</para>
			
		<programlisting language="java"><![CDATA[
FacebookLink link = new FacebookLink("http://www.springsource.org/spring-social", 
        "Spring Social", 
        "The Spring Social Project", 
        "Spring Social is an extension to Spring to enable applications to connect with service providers.");
facebook.feedOperations().updateStatus("I'm trying out Spring Social!", link);]]>
		</programlisting>
			
		<para>
			When constructing the <classname>FacebookLink</classname> object, the first parameter is the link's URL, the second parameter is the name of the link, the third parameter is a caption, and the fourth is a description of the link.
		</para>
			
		<para>
			If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from.
			The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall.
				When called with no parameters, it retrieves posts from the authenticating user's wall:
		</para>
			
		<programlisting language="java"><![CDATA[
List<Post> feed = facebook.feedOperations().getFeed();]]>
		</programlisting>
			
		<para>
			Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:
		</para>			

		<programlisting language="java"><![CDATA[
List<Post> feed = facebook.feedOperations().getFeed("habuma");]]>
		</programlisting>

		<para>
			In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects.
			The <classname>Post</classname> class has six subtypes to represent different kinds of posts:
		</para>
			
		<itemizedlist>
			<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>
			<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>
			<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>
			<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>
			<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>
			<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>
		</itemizedlist>
			
		<para>
			The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>.
		</para>			
	</section>

</chapter>